
enum chat_type {
  PRIVATE
  GROUP
}

enum chat_role {
  OWNER
  ADMIN
  MEMBER
}

enum chat_message_status {
  SENT
  EDITED
  DELETED
}

model chat_room {
  id     Int    @id @default(autoincrement())
  name   String @db.VarChar(107)
  link   String @unique @db.VarChar(17)
  avatar String @db.VarChar(1007)

  type chat_type @default(PRIVATE)

  last_message_time DateTime @default(now())

  member  chat_member[]
  message chat_message[]

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@index([type, name])
}

model chat_member {
  id Int @id @default(autoincrement())

  role chat_role @default(MEMBER)

  user_id Int
  user    user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  chat_room_id Int
  chat_room    chat_room @relation(fields: [chat_room_id], references: [id], onDelete: Cascade)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([user_id, chat_room_id])
}

model chat_message {
  id Int @id @default(autoincrement())

  content  String @default("") @db.VarChar(2000)
  file_url String @default("") @db.VarChar(1007)

  status chat_message_status @default(SENT)

  deleted_at    DateTime?
  deleted_by_id Int?
  deleted_by    user?     @relation("deleted_chat_message", fields: [deleted_by_id], references: [id], onDelete: SetNull)

  chat_room_id Int
  chat_room    chat_room @relation(fields: [chat_room_id], references: [id], onDelete: Cascade)

  sender_id Int
  sender    user @relation("sent_chat_message", fields: [sender_id], references: [id], onDelete: Cascade)

  reply_to_id Int?
  reply_to    chat_message?  @relation("chat_message_reply", fields: [reply_to_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  reply_array chat_message[] @relation("chat_message_reply")

  seen_by      chat_message_seen[]
  reaction     chat_message_reaction[]
  edit_history chat_message_edit_history[]

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@index([chat_room_id])
}

model chat_message_seen {
  id Int @id @default(autoincrement())

  chat_message_id Int
  chat_message    chat_message @relation(fields: [chat_message_id], references: [id], onDelete: Cascade)

  user_id Int
  user    user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  read_at DateTime @default(now())

  @@unique([user_id, chat_message_id])
}

model chat_message_reaction {
  id Int @id @default(autoincrement())

  emoji String @db.VarChar(10)

  chat_message_id Int
  chat_message    chat_message @relation(fields: [chat_message_id], references: [id], onDelete: Cascade)

  user_id Int
  user    user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created DateTime @default(now())
  updated DateTime @updatedAt

  @@unique([user_id, chat_message_id, emoji])
}

model chat_message_edit_history {
  id Int @id @default(autoincrement())

  previous_content String       @db.VarChar(2000)
  chat_message_id  Int
  chat_message     chat_message @relation(fields: [chat_message_id], references: [id], onDelete: Cascade)

  edited_at DateTime @default(now())

  @@index([chat_message_id])
}
